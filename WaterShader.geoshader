#version 400 core
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in vec3 teWorldPos[];
in vec2 teUV[];

out vec3 gsNormal;
out vec2 gsUV;
out vec3 gsEyeDir;
out vec3 gsLightDir;

uniform float time;
uniform sampler2D dispMap;
uniform float dispScale;
uniform vec3 eyePos;
uniform vec3 lightPos;
uniform mat4 MVP;

vec3 Gerstner(vec3 pos, float w, float A, float phi, float Q, vec2 D, int N) {
    float phase = w * dot(D, pos.xz) + phi * time;
    float cosPhase = cos(phase);
    float sinPhase = sin(phase);
    vec3 displacement;
    displacement.x = Q * A * D.x * cosPhase;
    displacement.y = A * sinPhase;
    displacement.z = Q * A * D.y * cosPhase;
    return displacement;
}

void main() {
    vec3 newPos[3];
    vec2 newUV[3];
    
    for (int i = 0; i < 3; ++i) {
        vec3 pos = teWorldPos[i];
        vec2 uv = teUV[i];
        
        pos += Gerstner(pos, 0.5, 0.15, 0.8, 0.2, vec2(0.4, 0.6), 3);
        pos += Gerstner(pos, 0.3, 0.12, 0.6, 0.2, vec2(0.6, 0.2), 3);
        pos += Gerstner(pos, 0.2, 0.1, 0.4, 0.15, vec2(0.3, 0.7), 3);

        float disp = texture(dispMap, uv).r;
        pos.y += disp * dispScale;
        
        newPos[i] = pos;
        newUV[i] = uv;
    }
    
    vec3 edge1 = newPos[1] - newPos[0];
    vec3 edge2 = newPos[2] - newPos[0];
    vec3 normal = normalize(cross(edge1, edge2));
    
    for (int i = 0; i < 3; ++i) {
        gl_Position = MVP * vec4(newPos[i], 1.0);
        gsNormal = normal;
        gsUV = newUV[i];
        gsLightDir = normalize(lightPos - newPos[i]);
        gsEyeDir = normalize(eyePos - newPos[i]);
        EmitVertex();
    }
    EndPrimitive();
}